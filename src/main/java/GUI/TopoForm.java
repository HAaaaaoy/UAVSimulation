package GUI;

import UAVs.network.Topology;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import javafx.geometry.Bounds;
import scene.PlaneWars;
import scene.SimulationStatus;
import scene.UAVNetwork;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class TopoForm {
    private JPanel jpanel;
    private JButton 随机拓扑生成Button;
    private JButton 格状网格拓扑Button;
    private JButton 球状网络拓扑Button;
    private JButton 巡航拓扑Button;
    private JButton 链状网络拓扑Button;
    private JButton 切换拓扑Button;
    private JButton 启动仿真Button;
    public PlaneWars pw;


    public TopoForm(PlaneWars pw) {

        this.pw = pw;
        pw.setFocusable(true);
        pw.requestFocus();
        pw.setVisible(true);


        随机拓扑生成Button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                pw.initThread();
            }
        });

        格状网格拓扑Button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Rectangle bounds = pw.getBounds();
                pw.setSize(bounds.width, bounds.height);
                pw.setNetwork(new UAVNetwork(64, pw));
                pw.topologyStatus = Topology.Grid;
                pw.uavNetwork.status = SimulationStatus.FindCluster;
                pw.initThread();
            }
        });

        链状网络拓扑Button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Rectangle bounds = pw.getBounds();
                pw.setSize(bounds.width, bounds.height);
                pw.setNetwork(new UAVNetwork(64, pw));
                pw.topologyStatus = Topology.Line;
                pw.uavNetwork.status = SimulationStatus.FindCluster;
                pw.initThread();
            }
        });

        球状网络拓扑Button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

            }
        });

        巡航拓扑Button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

            }
        });

        启动仿真Button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                pw.startSimulation();
            }
        });


    }

    public JPanel getJpanel() {
        return jpanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        jpanel = new JPanel();
        jpanel.setLayout(new GridLayoutManager(1, 8, new Insets(0, 0, 0, 0), -1, -1));
        final Spacer spacer1 = new Spacer();
        jpanel.add(spacer1, new GridConstraints(0, 7, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 10), null, 0, false));
        格状网格拓扑Button = new JButton();
        格状网格拓扑Button.setText("格状网格拓扑");
        jpanel.add(格状网格拓扑Button, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        球状网络拓扑Button = new JButton();
        球状网络拓扑Button.setText("球状网络拓扑");
        jpanel.add(球状网络拓扑Button, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        链状网络拓扑Button = new JButton();
        链状网络拓扑Button.setText("链状网络拓扑");
        jpanel.add(链状网络拓扑Button, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        切换拓扑Button = new JButton();
        切换拓扑Button.setText("切换拓扑");
        jpanel.add(切换拓扑Button, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        启动仿真Button = new JButton();
        启动仿真Button.setText("启动仿真");
        jpanel.add(启动仿真Button, new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        巡航拓扑Button = new JButton();
        巡航拓扑Button.setText("巡航拓扑");
        jpanel.add(巡航拓扑Button, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        随机拓扑生成Button = new JButton();
        随机拓扑生成Button.setHorizontalAlignment(0);
        随机拓扑生成Button.setText("随机拓扑生成");
        随机拓扑生成Button.setVerticalAlignment(0);
        随机拓扑生成Button.setVerticalTextPosition(0);
        jpanel.add(随机拓扑生成Button, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return jpanel;
    }

}
